1、函数
    arguments代表的是实参，再arguments这个对象上返回的值一个实参数组，如果想要获取任意一个实参的话，使用数组方式进行获取，arguments对象不是一个数组，它是类似数组的一个对象

2、再es6中引入了rest参数（...变量名）,特点是可以获取多余的参数，对于这个变量来说它是一个数组，使用这个数组来接收参数的，接收的是实参，换句话来说有了rest参数那么我们就不需要再使用arguments
     在使用rest参数的时候，后边不能再有其他的参数了
     function test(a,...b){}-->正确    当前函数.length获取的值是1
     function test(a,...b,c){}-->错误
     es中新增了length这个属性，length属性是不能获取rest参数的

3、再es中新增了一种遍历数组的方式
     for循环
     for in
 es6中新增了一种遍历数组的方式：
    for...of

4、函数中不能使用严格模式的有：
     参数有默认值
     有rest参数
     有解构赋值
    定义严格模式有两种方式定义：全局定义（直接把当前的js文件全部定义成严格模式）
    局部定义：只再函数内部进行严格模式的定义

5、name属性：
     获取的是当前函数的函数名，是es6新增加的
     
6、箭头函数：
     箭头函数的话就相当于带返回值的函数
     return ：把return的内容返回给调用者
     箭头函数的格式：
     var 函数名 = （形参）=> 函数体
     箭头函数就相当于是给函数体加了一个return
     如果函数体多于一条语句的话那么使用{}包裹起来，并且加上return
     加{}按照正常的函数体来进行解析

7、如果返回值是一个对象的话，对象本身就使用的是{}来表示的
     那么再对象的外边还需要加一个（），括号里边的内容才是我需要返回的内容呢

8、es6中的箭头函数我们知道是什么了，也知道应该怎么表示了，
     箭头函数和普通函数有什么区别
     1、this的问题
          普通函数获取prototype是由返回值的，由this
          箭头函数获取protptype返回的是undefined，箭头函数没有prototype原型对象，箭头函数本身是不具备this的
     2、使用箭头函数再继承的时候是谁的this
          正常情况下，如果使用的是普通函数的话，那么再继承的时候this的指向是会发生变化的，谁里边调用这个函数this指向的就是哪个对象
          如果使用的是箭头函数的话
          箭头函数的this指向是不会发生变化的，以开始指向的是谁，那么始终指向谁
     3、因为箭头函数中没有this，所以不能把箭头函数作为构造函数，也就意味着不能使用箭头函数进行实例化对象
     4、不能直接修改箭头函数的this指向




